# This action produces a docker artifact of my utility pod used in k8s.
name: Build Util Container

on:
  push:
    branches: ['release']
  workflow_dispatch:

jobs:
  trivy:
    name: Trivy Security Scan
    if: github.event_name != 'pull_request' || !github.event.pull_request.draft
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@v2
        with:
          format: "sarif"
          output: "trivy-results.sarif"
          ignore-unfixed: true
          scan-type: "fs"
          scanners: "vuln,secret"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@0.33.1
        with:
          sarif_file: "trivy-results.sarif"


  build-and-push-image:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Github Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.actor }}/util
          tags: release

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./utility-pod
          file: ./utility-pod/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # would prefer to scan the image BEFORE it's uploaded, but I've not been able to find a hook in the build-push-action that would allow this to happen
      # TODO: rather than using the build-push-action break the steps up with just a docker build / scan / docker push method.
      - name: Scan image
        run: |
          docker images
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype ghcr.io/${{ github.actor }}/util:release --platform linux/amd64
          grype ghcr.io/${{ github.actor }}/util:release --platform linux/arm64
